Param(
    [Parameter(Mandatory=$true)][string]$SavePath,
    [Parameter(Mandatory=$false)][string]$LookUpType
)
Function Get-File(){  
    [System.Reflection.Assembly]::LoadWithPartialName(“System.windows.forms”)
        | Out-Null
        $FileDialogBox = New-Object System.Windows.Forms.OpenFileDialog
        $FileDialogBox.filter = “txt (*.txt)| *.txt”
        $FileDialogBox.ShowDialog() | Out-Null
             return $FileDialogBox.filename
        }
 
while ([string]::IsNullOrEmpty($LookUpType)) {
    Write-Host "Do you want to query a (s)ingle PC, a (l)ist of PCs,`
                or (a)ll PCs on your domain:"
    $LookUpType=Read-Host "s, l, a: or any other key to cancel?"   
}
 
switch ($LookUpType[0]) {
    "a"     {$ObjList=(Get-ADComputer -filter *|Where-Object `
             {$_.enabled -eq $true}).name  }
    "s"     {$ObjList=Read-Host "Enter the name of the PC"  }
    "l"     {$TargetList=Get-File;
             $ObjList=Get-Content $TargetList  }
    Default {write-host "No valid LookUpType found, please try again and`
             select : a, s, or l"; exit}
}
 
foreach($PC in $ObjList){
    $Alive=Test-Connection -Count 1 $PC -Quiet
    if ($Alive){
        $Online="True"
        $base= Get-CimInstance -computername $PC -ClassName `
               Win32_ComputerSystem -ErrorAction SilentlyContinue
        $os = Get-CIMInstance -computername $PC -class `
              Win32_OperatingSystem -ErrorAction SilentlyContinue
        $vol = Get-CIMInstance -computername $PC -class Win32_Volume|
               Where-Object {$_.DriveLetter -eq "C:"}`
               -ErrorAction SilentlyContinue
        $net = Get-CIMInstance -computername $PC -class `
               Win32_NetworkAdapterConfiguration |
               where-object { $_.IPAddress -ne $null } -ErrorAction ` 
               SilentlyContinue
        
    }else{
        $Online="False"
    }    
 
    
        $DeviceInfo= @{
            Online=$Online
            SystemName=$PC
            OperatingSystem=$os.name.split("|")[0]
            SerialNumber= $os.SerialNumber
            Version=$os.Version
            Architecture=$os.OSArchitecture
            Organization=$os.Organization
            Domain=$base.Domain
            RAM_GB=$base.TotalPhysicalMemory/1GB
            IPAddress=($net.IPAddress -join (", "))
            Subnet=($net.IPSubnet -join (", "))
            MACAddress=$net.MACAddress
            DiskCapacity_GB= $vol.Capacity/1GB
            FreeCapacity_GB=$vol.FreeSpace/1GB
        }
while ($SavePath -notlike "*.csv"){
    Write-Error "The save path must end in a csv file name `
                 `n Example: c:\temp\report.csv"
    $SavePath=Read-Host "Enter the full path and name of the csv to save`
                         the data to" 
}
 
$DeviceInfo| Export-CSV $SavePath -Append
    }
