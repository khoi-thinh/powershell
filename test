function Set-TMServiceLogon {
    [cmdletBinding()]
    param (
        [Parameter(Mandatory=$True,ValueFromPipelineByPropertyName=$True)]
        [string]$ServiceName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [string]$NewUser,

        [Parameter(Mandatory=$True,ValueFromPipelineByPropertyName=$True)]
        [string]$NewPassword,

        [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelineByPropertyName=$True)]
        [string[]]$ComputerName,

        [string]$ErrorLogFilePath
    )
    
    BEGIN {}

    PROCESS {
    foreach ($computer in $ComputerName) {
        # new cim session
        $option = New-CimSessionOption -Protocol Wsman
        $session = New-CimSession -ComputerName $computer -SessionOption $option

        if ($PSBoundParameters.ContainsKey('NewUser')) {
            $args = @{'StartName'=$NewUser;'StartPassWord'=$NewPassword}
        }
        else {
            $args = @{'StartPassword'=$NewPassword}
        }
        # query data
        $params = @{'CimSession'=$session;'Query'="select * from Win32_process where name='$ServiceName'";
                    'MethodName'='Change';'Arguments'=$args}
        $ret = Invoke-CimMethod @params

        switch ($ret.ReturnValue) {
            0 { $status = "Success" }
            22 {  $status = "Invalid Account" }
            Default { $status = "Failed: $($ret.ReturnValue)" }
        } 

        $props = @{'ComputerName'=$computer; 'Status'=$status}
        $obj = New-Object -TypeName psobject -Property $props
        Write-Output $obj

       $session | Remove-CimSession
    
    } #foreach
} #PROCESS

    END {}
}
