function Get-MachineInfo {
    [cmdletBinding()]
    param (
        [Parameter(ValueFromPipeline=$True,Mandatory=$True)]
        [Alias('CN','MachineName','Name')]
        [string[]]$ComputerName,

        [string]$LogFailureToPath,

        [ValidateSet('Wsman','Dcom')]
        [string]$Protocol = "wsman",

        [switch]$ProtocolFallBack
    )
    
    BEGIN {}

    PROCESS {
    foreach($computer in $ComputerName) {
        if ($Protocol -eq 'Dcom') {
            $option = New-CimSessionOption -Protocol Dcom
        }
        else {
            $option = New-CimSessionOption -Protocol Wsman
        }

        # Connect session
        $session = New-CimSession -ComputerName $computer -SessionOption $option

        # query data
        $os_params = @{'ClassName'='Win32_OperatingSystem';'CimSession'=$session}
        $os = Get-CimInstance @os_params
    
        $cs_params = @{'ClassName'='Win32_ComputerSystem';'CimSession'=$session}
        $cs = Get-CimInstance @cs_params

        $sysdrive = $os.SystemDrive

        $drive_params = @{'ClassName'='Win32_LogicalDisk';'Filter'="DeviceId='$sysdrive'"}
        $drive = Get-CimInstance @drive_params

        $proc_params = @{'ClassName'='Win32_Processor';'CimSession'=$session}
        $proc = Get-CimInstance @proc_params | Select-Object -First 1

        # close session
        $session | Remove-CimSession    

        # output data
        $props = @{'ComputerName'=$computer;'OSVersion'=$os.version;'SPVersion'=$os.ServicePackMajorVersion;
                    'OSBuild'=$os.buildnumber;'Manufacturer'=$cs.manufacturer;'Model'=$cs.model;
                    'Procs'=$cs.numberofprocessors;'Cores'=$cs.numberoflogicalprocessors;
                    'RAM'=($cs.totalphysicalmemory / 1GB);'Arch'=$proc.addresswidth;
                    'SysDriveFreeSpace'=$drive.freespace}
        $obj = New-Object -TypeName psobject -Property $props
        Write-Output $obj            

    }
} # PROCESS

    END {}

} #function
